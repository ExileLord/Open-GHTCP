using System;
using GHNamespaceJ;

namespace GHNamespaceI
{
    public class Class85 : INterface7
    {
        public class Class86
        {
            public int[] Int0;

            public int[] Int1;

            public Class86()
            {
                Int0 = new int[23];
                Int1 = new int[14];
            }

            public Class86(int[] int2, int[] int3)
            {
                Int0 = int2;
                Int1 = int3;
            }
        }

        public class Class87
        {
            public int Int0;

            public int Int1;

            public int Int2;

            public int Int3;

            public int Int4;

            public int Int5;

            public int Int6;

            public int[] Int7;

            public int[] Int8;

            public int Int9;

            public int Int10;

            public int Int11;

            public int Int12;

            public int Int13;

            public Class87()
            {
                Int7 = new int[3];
                Int8 = new int[3];
            }
        }

        public class Class88
        {
            public int[] Int0;

            public Class87[] Class870;

            public Class88()
            {
                Int0 = new int[4];
                Class870 = new Class87[2];
                Class870[0] = new Class87();
                Class870[1] = new Class87();
            }
        }

        public class Class89
        {
            public int Int0;

            public int Int1;

            public Class88[] Class880;

            public Class89()
            {
                Class880 = new Class88[2];
                Class880[0] = new Class88();
                Class880[1] = new Class88();
            }
        }

        public class Class90
        {
            public int[] Int0;

            public int[,] Int1;

            public Class90()
            {
                Int0 = new int[23];
                Int1 = new int[3, 13];
            }
        }

        public class Class91
        {
            private Class85 _class850;

            public int[] Int0;

            public int[] Int1;

            private void method_0(Class85 class851)
            {
                _class850 = class851;
            }

            public Class91(Class85 class851, int[] int2, int[] int3)
            {
                method_0(class851);
                Int0 = int2;
                Int1 = int3;
            }
        }

        public double Double0 = 1.3333333333333333;

        public int[] Int0;

        private int _int1;

        private readonly int[] _int2;

        private readonly float[][,] _float0;

        private readonly float[][,] _float1;

        private readonly float[] _float2;

        private readonly float[,] _float3;

        private readonly float[,] _float4;

        private readonly int[] _int3;

        private readonly Class82 _class820;

        private readonly ZzSoundClass _class1070;

        private readonly Class80 _class800;

        private readonly Class80 _class801;

        private readonly Class84 _class840;

        private readonly Enum4 _enum40;

        private readonly Class102 _class1020;

        private readonly Class89 _class890;

        private readonly Class90[] _class900;

        private readonly Class90[] _class901;

        private readonly int _int4;

        private int _int5;

        private int _int6;

        private readonly int _int7;

        private readonly int _int8;

        private readonly int _int9;

        private readonly int _int10;

        private readonly float[] _float5 = new float[32];

        private readonly float[] _float6 = new float[32];

        private readonly int[] _int11 = new int[4];

        public readonly int[] Int12;

        public readonly int[] Int13;

        public readonly int[] Int14;

        public readonly int[] Int15;

        public int[] Int16;

        public float[] Float7;

        public readonly float[] Float8;

        public readonly float[] Float9;

        private int _int17;

        private static readonly int[,] Int18 =
        {
            {
                0,
                0,
                0,
                0,
                3,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4
            },
            {
                0,
                1,
                2,
                3,
                0,
                1,
                2,
                3,
                1,
                2,
                3,
                1,
                2,
                3,
                2,
                3
            }
        };

        public static readonly int[] Int19 =
        {
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            2,
            2,
            3,
            3,
            3,
            2,
            0
        };

        private readonly Class86[] _class860;

        public static readonly float[] Float10 =
        {
            1f,
            0.707106769f,
            0.5f,
            0.353553385f,
            0.25f,
            0.176776692f,
            0.125f,
            0.0883883461f,
            0.0625f,
            0.0441941731f,
            0.03125f,
            0.0220970865f,
            0.015625f,
            0.0110485433f,
            0.0078125f,
            0.00552427163f,
            0.00390625f,
            0.00276213582f,
            0.001953125f,
            0.00138106791f,
            0.0009765625f,
            0.000690533954f,
            0.00048828125f,
            0.000345266977f,
            0.000244140625f,
            0.000172633489f,
            0.000122070313f,
            8.63167443E-05f,
            6.10351563E-05f,
            4.31583721E-05f,
            3.05175781E-05f,
            2.15791861E-05f,
            1.52587891E-05f,
            1.0789593E-05f,
            7.62939453E-06f,
            5.39479652E-06f,
            3.81469727E-06f,
            2.69739826E-06f,
            1.90734863E-06f,
            1.34869913E-06f,
            9.536743E-07f,
            6.74349565E-07f,
            4.76837158E-07f,
            3.37174782E-07f,
            2.38418579E-07f,
            1.68587391E-07f,
            1.1920929E-07f,
            8.42936956E-08f,
            5.96046448E-08f,
            4.21468478E-08f,
            2.98023224E-08f,
            2.10734239E-08f,
            1.49011612E-08f,
            1.05367119E-08f,
            7.450581E-09f,
            5.268356E-09f,
            3.7252903E-09f,
            2.634178E-09f,
            1.86264515E-09f,
            1.317089E-09f,
            9.313226E-10f,
            6.585445E-10f,
            4.656613E-10f,
            3.29272248E-10f
        };

        public static readonly float[] Float11 = smethod_0();

        public static readonly float[][] Float12 =
        {
            new[]
            {
                1f,
                0.8408964f,
                0.707106769f,
                0.594603539f,
                0.5f,
                0.4204482f,
                0.353553385f,
                0.297301769f,
                0.25f,
                0.2102241f,
                0.176776692f,
                0.148650885f,
                0.125f,
                0.105112053f,
                0.0883883461f,
                0.07432544f,
                0.0625f,
                0.0525560267f,
                0.0441941731f,
                0.03716272f,
                0.03125f,
                0.0262780134f,
                0.0220970865f,
                0.01858136f,
                0.015625f,
                0.0131390067f,
                0.0110485433f,
                0.00929068f,
                0.0078125f,
                0.00656950334f,
                0.00552427163f,
                0.00464534f
            },
            new[]
            {
                1f,
                0.707106769f,
                0.5f,
                0.353553385f,
                0.25f,
                0.176776692f,
                0.125f,
                0.0883883461f,
                0.0625f,
                0.0441941731f,
                0.03125f,
                0.0220970865f,
                0.015625f,
                0.0110485433f,
                0.0078125f,
                0.00552427163f,
                0.00390625f,
                0.00276213582f,
                0.001953125f,
                0.00138106791f,
                0.0009765625f,
                0.000690533954f,
                0.00048828125f,
                0.000345266977f,
                0.000244140625f,
                0.000172633489f,
                0.000122070313f,
                8.63167443E-05f,
                6.10351563E-05f,
                4.31583721E-05f,
                3.05175781E-05f,
                2.15791861E-05f
            }
        };

        public static readonly float[] Float13 =
        {
            0f,
            0.2679492f,
            0.577350259f,
            1f,
            1.73205078f,
            3.732051f,
            1E+11f,
            -3.732051f,
            -1.73205078f,
            -1f,
            -0.577350259f,
            -0.2679492f,
            0f,
            0.2679492f,
            0.577350259f,
            1f
        };

        private static readonly int[] Int20 =
        {
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            17,
            17,
            17,
            17,
            17,
            17,
            17,
            17,
            17,
            17,
            17,
            17,
            17,
            17,
            17,
            17,
            17,
            17,
            18,
            18,
            18,
            18,
            18,
            18,
            18,
            18,
            18,
            18,
            18,
            18,
            18,
            18,
            18,
            18,
            18,
            18,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31
        };

        private static readonly int[] Int21 =
        {
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17
        };

        private static int[][] _int22;

        private static readonly float[] Float14 =
        {
            0.8574929f,
            0.881742f,
            0.949628651f,
            0.9833146f,
            0.9955178f,
            0.9991606f,
            0.9998992f,
            0.999993145f
        };

        private static readonly float[] Float15 =
        {
            -0.51449573f,
            -0.471731961f,
            -0.31337744f,
            -0.1819132f,
            -0.09457419f,
            -0.0409655832f,
            -0.0141985686f,
            -0.00369997462f
        };

        public static readonly float[][] Float16 =
        {
            new[]
            {
                -0.0161412153f,
                -0.05360318f,
                -0.100707136f,
                -0.16280818f,
                -0.5f,
                -0.383887351f,
                -0.6206114f,
                -1.16597557f,
                -3.87207532f,
                -4.225629f,
                -1.519529f,
                -0.974164844f,
                -0.737440765f,
                -1.20710683f,
                -0.5163616f,
                -0.454260528f,
                -0.407156557f,
                -0.3696946f,
                -0.3387627f,
                -0.312422216f,
                -0.289395869f,
                -0.268800825f,
                -0.5f,
                -0.232514173f,
                -0.215967149f,
                -0.200049788f,
                -0.184494928f,
                -0.169058457f,
                -0.153503612f,
                -0.137586251f,
                -0.121039219f,
                -0.207106784f,
                -0.0847525746f,
                -0.06415752f,
                -0.0411311723f,
                -0.0147907054f
            },
            new[]
            {
                -0.0161412153f,
                -0.05360318f,
                -0.100707136f,
                -0.16280818f,
                -0.5f,
                -0.383887351f,
                -0.6206114f,
                -1.16597557f,
                -3.87207532f,
                -4.225629f,
                -1.519529f,
                -0.974164844f,
                -0.737440765f,
                -1.20710683f,
                -0.5163616f,
                -0.454260528f,
                -0.407156557f,
                -0.3696946f,
                -0.33908543f,
                -0.3151181f,
                -0.296422273f,
                -0.28184548f,
                -0.5411961f,
                -0.2621323f,
                -0.25387916f,
                -0.2329629f,
                -0.198527291f,
                -0.152335346f,
                -0.0964964f,
                -0.03342383f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f
            },
            new[]
            {
                -0.0483008f,
                -0.157156572f,
                -0.283250451f,
                -0.429537475f,
                -1.20710683f,
                -0.8242648f,
                -1.14517486f,
                -1.769529f,
                -4.54702234f,
                -3.489053f,
                -0.7329629f,
                -0.150765151f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                0f
            },
            new[]
            {
                0f,
                0f,
                0f,
                0f,
                0f,
                0f,
                -0.150765136f,
                -0.7329629f,
                -3.489053f,
                -4.54702234f,
                -1.769529f,
                -1.14517486f,
                -0.8313774f,
                -1.306563f,
                -0.541420162f,
                -0.465289742f,
                -0.4106699f,
                -0.3700468f,
                -0.3387627f,
                -0.312422216f,
                -0.289395869f,
                -0.268800825f,
                -0.5f,
                -0.232514173f,
                -0.215967149f,
                -0.200049788f,
                -0.184494928f,
                -0.169058457f,
                -0.153503612f,
                -0.137586251f,
                -0.121039219f,
                -0.207106784f,
                -0.0847525746f,
                -0.06415752f,
                -0.0411311723f,
                -0.0147907054f
            }
        };

        public Class91 Class910;

        public static readonly int[,,] Int23 =
        {
            {
                {
                    6,
                    5,
                    5,
                    5
                },
                {
                    9,
                    9,
                    9,
                    9
                },
                {
                    6,
                    9,
                    9,
                    9
                }
            },
            {
                {
                    6,
                    5,
                    7,
                    3
                },
                {
                    9,
                    9,
                    12,
                    6
                },
                {
                    6,
                    9,
                    12,
                    6
                }
            },
            {
                {
                    11,
                    10,
                    0,
                    0
                },
                {
                    18,
                    18,
                    0,
                    0
                },
                {
                    15,
                    18,
                    0,
                    0
                }
            },
            {
                {
                    7,
                    7,
                    7,
                    0
                },
                {
                    12,
                    12,
                    12,
                    0
                },
                {
                    6,
                    15,
                    12,
                    0
                }
            },
            {
                {
                    6,
                    6,
                    6,
                    3
                },
                {
                    12,
                    9,
                    9,
                    6
                },
                {
                    6,
                    12,
                    9,
                    6
                }
            },
            {
                {
                    8,
                    8,
                    5,
                    0
                },
                {
                    15,
                    12,
                    9,
                    0
                },
                {
                    6,
                    18,
                    9,
                    0
                }
            }
        };

        public Class85(Class82 class821, ZzSoundClass class1071, Class80 class802, Class80 class803, Class84 class841,
            Enum4 enum41)
        {
            var array = new int[1];
            Int12 = array;
            var array2 = new int[1];
            Int13 = array2;
            var array3 = new int[1];
            Int14 = array3;
            var array4 = new int[1];
            Int15 = array4;
            Int16 = new int[576];
            Float7 = new float[576];
            Float8 = new float[18];
            Float9 = new float[36];
            //base..ctor();
            Class103.smethod_0();
            _int2 = new int[580];
            _float0 = new float[2][,];
            _float0[0] = new float[32, 18];
            _float0[1] = new float[32, 18];
            _float1 = new float[2][,];
            _float1[0] = new float[32, 18];
            _float1[1] = new float[32, 18];
            _float2 = new float[576];
            _float3 = new float[2, 576];
            _float4 = new float[2, 576];
            _int3 = new int[2];
            _class900 = new Class90[2];
            _class900[0] = new Class90();
            _class900[1] = new Class90();
            _class901 = _class900;
            _class860 = new Class86[9];
            int[] array5 =
            {
                0,
                6,
                12,
                18,
                24,
                30,
                36,
                44,
                54,
                66,
                80,
                96,
                116,
                140,
                168,
                200,
                238,
                284,
                336,
                396,
                464,
                522,
                576
            };
            int[] array6 =
            {
                0,
                4,
                8,
                12,
                18,
                24,
                32,
                42,
                56,
                74,
                100,
                132,
                174,
                192
            };
            int[] array7 =
            {
                0,
                6,
                12,
                18,
                24,
                30,
                36,
                44,
                54,
                66,
                80,
                96,
                114,
                136,
                162,
                194,
                232,
                278,
                330,
                394,
                464,
                540,
                576
            };
            int[] array8 =
            {
                0,
                4,
                8,
                12,
                18,
                26,
                36,
                48,
                62,
                80,
                104,
                136,
                180,
                192
            };
            int[] array9 =
            {
                0,
                6,
                12,
                18,
                24,
                30,
                36,
                44,
                54,
                66,
                80,
                96,
                116,
                140,
                168,
                200,
                238,
                284,
                336,
                396,
                464,
                522,
                576
            };
            int[] array10 =
            {
                0,
                4,
                8,
                12,
                18,
                26,
                36,
                48,
                62,
                80,
                104,
                134,
                174,
                192
            };
            int[] array11 =
            {
                0,
                4,
                8,
                12,
                16,
                20,
                24,
                30,
                36,
                44,
                52,
                62,
                74,
                90,
                110,
                134,
                162,
                196,
                238,
                288,
                342,
                418,
                576
            };
            int[] array12 =
            {
                0,
                4,
                8,
                12,
                16,
                22,
                30,
                40,
                52,
                66,
                84,
                106,
                136,
                192
            };
            int[] array13 =
            {
                0,
                4,
                8,
                12,
                16,
                20,
                24,
                30,
                36,
                42,
                50,
                60,
                72,
                88,
                106,
                128,
                156,
                190,
                230,
                276,
                330,
                384,
                576
            };
            int[] array14 =
            {
                0,
                4,
                8,
                12,
                16,
                22,
                28,
                38,
                50,
                64,
                80,
                100,
                126,
                192
            };
            int[] array15 =
            {
                0,
                4,
                8,
                12,
                16,
                20,
                24,
                30,
                36,
                44,
                54,
                66,
                82,
                102,
                126,
                156,
                194,
                240,
                296,
                364,
                448,
                550,
                576
            };
            int[] array16 =
            {
                0,
                4,
                8,
                12,
                16,
                22,
                30,
                42,
                58,
                78,
                104,
                138,
                180,
                192
            };
            int[] array17 =
            {
                0,
                6,
                12,
                18,
                24,
                30,
                36,
                44,
                54,
                66,
                80,
                96,
                116,
                140,
                168,
                200,
                238,
                284,
                336,
                396,
                464,
                522,
                576
            };
            int[] array18 =
            {
                0,
                4,
                8,
                12,
                18,
                26,
                36,
                48,
                62,
                80,
                104,
                134,
                174,
                192
            };
            int[] array19 =
            {
                0,
                6,
                12,
                18,
                24,
                30,
                36,
                44,
                54,
                66,
                80,
                96,
                116,
                140,
                168,
                200,
                238,
                284,
                336,
                396,
                464,
                522,
                576
            };
            int[] array20 =
            {
                0,
                4,
                8,
                12,
                18,
                26,
                36,
                48,
                62,
                80,
                104,
                134,
                174,
                192
            };
            int[] array21 =
            {
                0,
                12,
                24,
                36,
                48,
                60,
                72,
                88,
                108,
                132,
                160,
                192,
                232,
                280,
                336,
                400,
                476,
                566,
                568,
                570,
                572,
                574,
                576
            };
            int[] array22 =
            {
                0,
                8,
                16,
                24,
                36,
                52,
                72,
                96,
                124,
                160,
                162,
                164,
                166,
                192
            };
            _class860[0] = new Class86(array5, array6);
            _class860[1] = new Class86(array7, array8);
            _class860[2] = new Class86(array9, array10);
            _class860[3] = new Class86(array11, array12);
            _class860[4] = new Class86(array13, array14);
            _class860[5] = new Class86(array15, array16);
            _class860[6] = new Class86(array17, array18);
            _class860[7] = new Class86(array19, array20);
            _class860[8] = new Class86(array21, array22);
            if (_int22 == null)
            {
                _int22 = new int[9][];
                for (var i = 0; i < 9; i++)
                {
                    _int22[i] = smethod_1(_class860[i].Int1);
                }
            }
            int[] array23 =
            {
                0,
                6,
                11,
                16,
                21
            };
            int[] array24 =
            {
                0,
                6,
                12
            };
            Class910 = new Class91(this, array23, array24);
            Int0 = new int[54];
            _class820 = class821;
            _class1070 = class1071;
            _class800 = class802;
            _class801 = class803;
            _class840 = class841;
            _enum40 = enum41;
            _int5 = 0;
            _int7 = ((_class1070.method_8() == Enum5.Const3) ? 1 : 2);
            _int4 = ((_class1070.method_3() == Enum3.Const1) ? 2 : 1);
            _int10 = _class1070.method_6() + ((_class1070.method_3() == Enum3.Const1)
                         ? 3
                         : ((_class1070.method_3() == Enum3.Const2) ? 6 : 0));
            if (_int7 == 2)
            {
                switch (_enum40)
                {
                    case Enum4.Const0:
                        _int8 = 0;
                        _int9 = 1;
                        goto IL_521;
                    case Enum4.Const1:
                    case Enum4.Const3:
                        _int9 = 0;
                        _int8 = 0;
                        goto IL_521;
                    case Enum4.Const2:
                        _int9 = 1;
                        _int8 = 1;
                        goto IL_521;
                }
                _int8 = 0;
                _int9 = 1;
                goto IL_521;
            }
            _int9 = 0;
            _int8 = 0;
            IL_521:
            Array.Clear(_float3, 0, 1152);
            var arg54B0 = _int3;
            var arg54B1 = 0;
            _int3[1] = 576;
            arg54B0[arg54B1] = 576;
            _class1020 = new Class102();
            _class890 = new Class89();
        }

        public void imethod_0()
        {
            method_0();
        }

        public void method_0()
        {
            var num = _class1070.method_13();
            method_1();
            for (var i = 0; i < num; i++)
            {
                _class1020.method_3(_class820.method_13(8));
            }
            var num2 = _class1020.method_0() >> 3;
            int num3;
            if ((num3 = (_class1020.method_0() & 7)) != 0)
            {
                _class1020.method_1(8 - num3);
                num2++;
            }
            var j = _int5 - num2 - _class890.Int0;
            _int5 += num;
            if (j < 0)
            {
                return;
            }
            if (num2 > 4096)
            {
                _int5 -= 4096;
                _class1020.method_5(4096);
            }
            while (j > 0)
            {
                _class1020.method_1(8);
                j--;
            }
            for (var k = 0; k < _int4; k++)
            {
                int l;
                for (l = 0; l < _int7; l++)
                {
                    _int6 = _class1020.method_0();
                    if (_class1070.method_3() == Enum3.Const1)
                    {
                        method_2(l, k);
                    }
                    else
                    {
                        method_4(l, k);
                    }
                    method_5(l, k);
                    method_7(_float0[l], l, k);
                }
                method_9(k);
                if (_enum40 == Enum4.Const3 && _int7 > 1)
                {
                    method_12();
                }
                l = _int8;
                while (l <= _int9)
                {
                    method_8(_float1[l], l, k);
                    method_10(l, k);
                    method_11(l, k);
                    for (var m = 18; m < 576; m += 36)
                    {
                        for (var n = 1; n < 18; n += 2)
                        {
                            _float2[m + n] = -_float2[m + n];
                        }
                    }
                    if (l == 0)
                    {
                        goto IL_241;
                    }
                    if (_enum40 == Enum4.Const2)
                    {
                        goto IL_241;
                    }
                    for (var n = 0; n < 18; n++)
                    {
                        var num4 = 0;
                        for (var m = 0; m < 576; m += 18)
                        {
                            _float6[num4] = _float2[m + n];
                            num4++;
                        }
                        _class801.method_3(_float6);
                        _class801.method_22(_class840);
                    }
                    IL_2A7:
                    l++;
                    continue;
                    IL_241:
                    for (var n = 0; n < 18; n++)
                    {
                        var num4 = 0;
                        for (var m = 0; m < 576; m += 18)
                        {
                            _float5[num4] = _float2[m + n];
                            num4++;
                        }
                        _class800.method_3(_float5);
                        _class800.method_22(_class840);
                    }
                    goto IL_2A7;
                }
            }
            _int17++;
            _class840.method_5();
        }

        private bool method_1()
        {
            if (_class1070.method_3() == Enum3.Const1)
            {
                _class890.Int0 = _class820.method_13(9);
                _class890.Int1 = ((_int7 == 1) ? _class820.method_13(5) : _class820.method_13(3));
                for (var i = 0; i < _int7; i++)
                {
                    _class890.Class880[i].Int0[0] = _class820.method_13(1);
                    _class890.Class880[i].Int0[1] = _class820.method_13(1);
                    _class890.Class880[i].Int0[2] = _class820.method_13(1);
                    _class890.Class880[i].Int0[3] = _class820.method_13(1);
                }
                for (var j = 0; j < 2; j++)
                {
                    for (var i = 0; i < _int7; i++)
                    {
                        _class890.Class880[i].Class870[j].Int0 = _class820.method_13(12);
                        _class890.Class880[i].Class870[j].Int1 = _class820.method_13(9);
                        _class890.Class880[i].Class870[j].Int2 = _class820.method_13(8);
                        _class890.Class880[i].Class870[j].Int3 = _class820.method_13(4);
                        _class890.Class880[i].Class870[j].Int4 = _class820.method_13(1);
                        if (_class890.Class880[i].Class870[j].Int4 != 0)
                        {
                            _class890.Class880[i].Class870[j].Int5 = _class820.method_13(2);
                            _class890.Class880[i].Class870[j].Int6 = _class820.method_13(1);
                            _class890.Class880[i].Class870[j].Int7[0] = _class820.method_13(5);
                            _class890.Class880[i].Class870[j].Int7[1] = _class820.method_13(5);
                            _class890.Class880[i].Class870[j].Int8[0] = _class820.method_13(3);
                            _class890.Class880[i].Class870[j].Int8[1] = _class820.method_13(3);
                            _class890.Class880[i].Class870[j].Int8[2] = _class820.method_13(3);
                            if (_class890.Class880[i].Class870[j].Int5 == 0)
                            {
                                return false;
                            }
                            if (_class890.Class880[i].Class870[j].Int5 == 2 &&
                                _class890.Class880[i].Class870[j].Int6 == 0)
                            {
                                _class890.Class880[i].Class870[j].Int9 = 8;
                            }
                            else
                            {
                                _class890.Class880[i].Class870[j].Int9 = 7;
                            }
                            _class890.Class880[i].Class870[j].Int10 = 20 - _class890.Class880[i].Class870[j].Int9;
                        }
                        else
                        {
                            _class890.Class880[i].Class870[j].Int7[0] = _class820.method_13(5);
                            _class890.Class880[i].Class870[j].Int7[1] = _class820.method_13(5);
                            _class890.Class880[i].Class870[j].Int7[2] = _class820.method_13(5);
                            _class890.Class880[i].Class870[j].Int9 = _class820.method_13(4);
                            _class890.Class880[i].Class870[j].Int10 = _class820.method_13(3);
                            _class890.Class880[i].Class870[j].Int5 = 0;
                        }
                        _class890.Class880[i].Class870[j].Int11 = _class820.method_13(1);
                        _class890.Class880[i].Class870[j].Int12 = _class820.method_13(1);
                        _class890.Class880[i].Class870[j].Int13 = _class820.method_13(1);
                    }
                }
            }
            else
            {
                _class890.Int0 = _class820.method_13(8);
                _class890.Int1 = ((_int7 == 1) ? _class820.method_13(1) : _class820.method_13(2));
                for (var i = 0; i < _int7; i++)
                {
                    _class890.Class880[i].Class870[0].Int0 = _class820.method_13(12);
                    _class890.Class880[i].Class870[0].Int1 = _class820.method_13(9);
                    _class890.Class880[i].Class870[0].Int2 = _class820.method_13(8);
                    _class890.Class880[i].Class870[0].Int3 = _class820.method_13(9);
                    _class890.Class880[i].Class870[0].Int4 = _class820.method_13(1);
                    if (_class890.Class880[i].Class870[0].Int4 != 0)
                    {
                        _class890.Class880[i].Class870[0].Int5 = _class820.method_13(2);
                        _class890.Class880[i].Class870[0].Int6 = _class820.method_13(1);
                        _class890.Class880[i].Class870[0].Int7[0] = _class820.method_13(5);
                        _class890.Class880[i].Class870[0].Int7[1] = _class820.method_13(5);
                        _class890.Class880[i].Class870[0].Int8[0] = _class820.method_13(3);
                        _class890.Class880[i].Class870[0].Int8[1] = _class820.method_13(3);
                        _class890.Class880[i].Class870[0].Int8[2] = _class820.method_13(3);
                        if (_class890.Class880[i].Class870[0].Int5 == 0)
                        {
                            return false;
                        }
                        if (_class890.Class880[i].Class870[0].Int5 == 2 && _class890.Class880[i].Class870[0].Int6 == 0)
                        {
                            _class890.Class880[i].Class870[0].Int9 = 8;
                        }
                        else
                        {
                            _class890.Class880[i].Class870[0].Int9 = 7;
                            _class890.Class880[i].Class870[0].Int10 = 20 - _class890.Class880[i].Class870[0].Int9;
                        }
                    }
                    else
                    {
                        _class890.Class880[i].Class870[0].Int7[0] = _class820.method_13(5);
                        _class890.Class880[i].Class870[0].Int7[1] = _class820.method_13(5);
                        _class890.Class880[i].Class870[0].Int7[2] = _class820.method_13(5);
                        _class890.Class880[i].Class870[0].Int9 = _class820.method_13(4);
                        _class890.Class880[i].Class870[0].Int10 = _class820.method_13(3);
                        _class890.Class880[i].Class870[0].Int5 = 0;
                    }
                    _class890.Class880[i].Class870[0].Int12 = _class820.method_13(1);
                    _class890.Class880[i].Class870[0].Int13 = _class820.method_13(1);
                }
            }
            return true;
        }

        private void method_2(int int24, int int25)
        {
            var @class = _class890.Class880[int24].Class870[int25];
            var num = @class.Int3;
            var num2 = Int18[0, num];
            var num3 = Int18[1, num];
            if (@class.Int4 == 0 || @class.Int5 != 2)
            {
                if (_class890.Class880[int24].Int0[0] == 0 || int25 == 0)
                {
                    _class901[int24].Int0[0] = _class1020.method_1(num2);
                    _class901[int24].Int0[1] = _class1020.method_1(num2);
                    _class901[int24].Int0[2] = _class1020.method_1(num2);
                    _class901[int24].Int0[3] = _class1020.method_1(num2);
                    _class901[int24].Int0[4] = _class1020.method_1(num2);
                    _class901[int24].Int0[5] = _class1020.method_1(num2);
                }
                if (_class890.Class880[int24].Int0[1] == 0 || int25 == 0)
                {
                    _class901[int24].Int0[6] = _class1020.method_1(num2);
                    _class901[int24].Int0[7] = _class1020.method_1(num2);
                    _class901[int24].Int0[8] = _class1020.method_1(num2);
                    _class901[int24].Int0[9] = _class1020.method_1(num2);
                    _class901[int24].Int0[10] = _class1020.method_1(num2);
                }
                if (_class890.Class880[int24].Int0[2] == 0 || int25 == 0)
                {
                    _class901[int24].Int0[11] = _class1020.method_1(num3);
                    _class901[int24].Int0[12] = _class1020.method_1(num3);
                    _class901[int24].Int0[13] = _class1020.method_1(num3);
                    _class901[int24].Int0[14] = _class1020.method_1(num3);
                    _class901[int24].Int0[15] = _class1020.method_1(num3);
                }
                if (_class890.Class880[int24].Int0[3] == 0 || int25 == 0)
                {
                    _class901[int24].Int0[16] = _class1020.method_1(num3);
                    _class901[int24].Int0[17] = _class1020.method_1(num3);
                    _class901[int24].Int0[18] = _class1020.method_1(num3);
                    _class901[int24].Int0[19] = _class1020.method_1(num3);
                    _class901[int24].Int0[20] = _class1020.method_1(num3);
                }
                _class901[int24].Int0[21] = 0;
                _class901[int24].Int0[22] = 0;
                return;
            }
            if (@class.Int6 != 0)
            {
                int i;
                for (i = 0; i < 8; i++)
                {
                    _class901[int24].Int0[i] = _class1020.method_1(Int18[0, @class.Int3]);
                }
                for (i = 3; i < 6; i++)
                {
                    for (var j = 0; j < 3; j++)
                    {
                        _class901[int24].Int1[j, i] = _class1020.method_1(Int18[0, @class.Int3]);
                    }
                }
                for (i = 6; i < 12; i++)
                {
                    for (var j = 0; j < 3; j++)
                    {
                        _class901[int24].Int1[j, i] = _class1020.method_1(Int18[1, @class.Int3]);
                    }
                }
                i = 12;
                for (var j = 0; j < 3; j++)
                {
                    _class901[int24].Int1[j, i] = 0;
                }
                return;
            }
            _class901[int24].Int1[0, 0] = _class1020.method_1(num2);
            _class901[int24].Int1[1, 0] = _class1020.method_1(num2);
            _class901[int24].Int1[2, 0] = _class1020.method_1(num2);
            _class901[int24].Int1[0, 1] = _class1020.method_1(num2);
            _class901[int24].Int1[1, 1] = _class1020.method_1(num2);
            _class901[int24].Int1[2, 1] = _class1020.method_1(num2);
            _class901[int24].Int1[0, 2] = _class1020.method_1(num2);
            _class901[int24].Int1[1, 2] = _class1020.method_1(num2);
            _class901[int24].Int1[2, 2] = _class1020.method_1(num2);
            _class901[int24].Int1[0, 3] = _class1020.method_1(num2);
            _class901[int24].Int1[1, 3] = _class1020.method_1(num2);
            _class901[int24].Int1[2, 3] = _class1020.method_1(num2);
            _class901[int24].Int1[0, 4] = _class1020.method_1(num2);
            _class901[int24].Int1[1, 4] = _class1020.method_1(num2);
            _class901[int24].Int1[2, 4] = _class1020.method_1(num2);
            _class901[int24].Int1[0, 5] = _class1020.method_1(num2);
            _class901[int24].Int1[1, 5] = _class1020.method_1(num2);
            _class901[int24].Int1[2, 5] = _class1020.method_1(num2);
            _class901[int24].Int1[0, 6] = _class1020.method_1(num3);
            _class901[int24].Int1[1, 6] = _class1020.method_1(num3);
            _class901[int24].Int1[2, 6] = _class1020.method_1(num3);
            _class901[int24].Int1[0, 7] = _class1020.method_1(num3);
            _class901[int24].Int1[1, 7] = _class1020.method_1(num3);
            _class901[int24].Int1[2, 7] = _class1020.method_1(num3);
            _class901[int24].Int1[0, 8] = _class1020.method_1(num3);
            _class901[int24].Int1[1, 8] = _class1020.method_1(num3);
            _class901[int24].Int1[2, 8] = _class1020.method_1(num3);
            _class901[int24].Int1[0, 9] = _class1020.method_1(num3);
            _class901[int24].Int1[1, 9] = _class1020.method_1(num3);
            _class901[int24].Int1[2, 9] = _class1020.method_1(num3);
            _class901[int24].Int1[0, 10] = _class1020.method_1(num3);
            _class901[int24].Int1[1, 10] = _class1020.method_1(num3);
            _class901[int24].Int1[2, 10] = _class1020.method_1(num3);
            _class901[int24].Int1[0, 11] = _class1020.method_1(num3);
            _class901[int24].Int1[1, 11] = _class1020.method_1(num3);
            _class901[int24].Int1[2, 11] = _class1020.method_1(num3);
            _class901[int24].Int1[0, 12] = 0;
            _class901[int24].Int1[1, 12] = 0;
            _class901[int24].Int1[2, 12] = 0;
        }

        private void method_3(int int24, int int25)
        {
            var num = _class1070.method_14();
            var num2 = 0;
            var @class = _class890.Class880[int24].Class870[int25];
            var num3 = @class.Int3;
            int num4;
            if (@class.Int5 == 2)
            {
                if (@class.Int6 == 0)
                {
                    num4 = 1;
                }
                else
                {
                    num4 = ((@class.Int6 == 1) ? 2 : 0);
                }
            }
            else
            {
                num4 = 0;
            }
            if ((num != 1 && num != 3) || int24 != 1)
            {
                if (num3 < 400)
                {
                    _int11[0] = Math.DivRem(num3 >> 4, 5, out _int11[1]);
                    _int11[2] = (num3 & 15) >> 2;
                    _int11[3] = (num3 & 3);
                    _class890.Class880[int24].Class870[int25].Int11 = 0;
                    num2 = 0;
                }
                else if (num3 < 500)
                {
                    _int11[0] = Math.DivRem(num3 - 400 >> 2, 5, out _int11[1]);
                    _int11[2] = (num3 - 400 & 3);
                    _int11[3] = 0;
                    _class890.Class880[int24].Class870[int25].Int11 = 0;
                    num2 = 1;
                }
                else if (num3 < 512)
                {
                    _int11[0] = Math.DivRem(num3 - 500, 3, out _int11[1]);
                    _int11[2] = 0;
                    _int11[3] = 0;
                    _class890.Class880[int24].Class870[int25].Int11 = 1;
                    num2 = 2;
                }
            }
            if ((num == 1 || num == 3) && int24 == 1)
            {
                var num5 = num3 >> 1;
                if (num5 < 180)
                {
                    int a;
                    _int11[0] = Math.DivRem(num5, 36, out a);
                    _int11[1] = Math.DivRem(a, 6, out _int11[2]);
                    _int11[3] = 0;
                    _class890.Class880[int24].Class870[int25].Int11 = 0;
                    num2 = 3;
                }
                else if (num5 < 244)
                {
                    var num6 = num5 - 180;
                    _int11[0] = (num6 & 63) >> 4;
                    _int11[1] = (num6 & 15) >> 2;
                    _int11[2] = (num6 & 3);
                    _int11[3] = 0;
                    _class890.Class880[int24].Class870[int25].Int11 = 0;
                    num2 = 4;
                }
                else if (num5 < 255)
                {
                    _int11[0] = Math.DivRem(num5 - 244, 3, out _int11[1]);
                    _int11[2] = 0;
                    _int11[3] = 0;
                    _class890.Class880[int24].Class870[int25].Int11 = 0;
                    num2 = 5;
                }
            }
            for (var i = 0; i < 45; i++)
            {
                Int0[i] = 0;
            }
            var num7 = 0;
            for (var j = 0; j < 4; j++)
            {
                for (var k = 0; k < Int23[num2, num4, j]; k++)
                {
                    Int0[num7++] = ((_int11[j] == 0) ? 0 : _class1020.method_1(_int11[j]));
                }
            }
        }

        private void method_4(int int24, int int25)
        {
            var num = 0;
            var @class = _class890.Class880[int24].Class870[int25];
            method_3(int24, int25);
            if (@class.Int4 == 0 || @class.Int5 != 2)
            {
                for (var i = 0; i < 21; i++)
                {
                    _class901[int24].Int0[i] = Int0[num++];
                }
                _class901[int24].Int0[21] = 0;
                _class901[int24].Int0[22] = 0;
                return;
            }
            if (@class.Int6 != 0)
            {
                for (var i = 0; i < 8; i++)
                {
                    _class901[int24].Int0[i] = Int0[num++];
                }
                for (var i = 3; i < 12; i++)
                {
                    for (var j = 0; j < 3; j++)
                    {
                        _class901[int24].Int1[j, i] = Int0[num++];
                    }
                }
                for (var j = 0; j < 3; j++)
                {
                    _class901[int24].Int1[j, 12] = 0;
                }
                return;
            }
            for (var i = 0; i < 12; i++)
            {
                for (var j = 0; j < 3; j++)
                {
                    _class901[int24].Int1[j, i] = Int0[num++];
                }
            }
            for (var j = 0; j < 3; j++)
            {
                _class901[int24].Int1[j, 12] = 0;
            }
        }

        private void method_5(int int24, int int25)
        {
            Int12[0] = 0;
            Int13[0] = 0;
            Int14[0] = 0;
            Int15[0] = 0;
            var num = _int6 + _class890.Class880[int24].Class870[int25].Int0;
            int num2;
            int num3;
            if (_class890.Class880[int24].Class870[int25].Int4 != 0 &&
                _class890.Class880[int24].Class870[int25].Int5 == 2)
            {
                num2 = ((_int10 == 8) ? 72 : 36);
                num3 = 576;
            }
            else
            {
                var num4 = _class890.Class880[int24].Class870[int25].Int9 + 1;
                var num5 = num4 + _class890.Class880[int24].Class870[int25].Int10 + 1;
                if (num5 > _class860[_int10].Int0.Length - 1)
                {
                    num5 = _class860[_int10].Int0.Length - 1;
                }
                num2 = _class860[_int10].Int0[num4];
                num3 = _class860[_int10].Int0[num5];
            }
            var i = 0;
            var num6 = 0;
            Class103 class103;
            while (num6 < _class890.Class880[int24].Class870[int25].Int1 << 1 && i < _int2.Length)
            {
                if (num6 < num2)
                {
                    class103 = Class103.Class1030[_class890.Class880[int24].Class870[int25].Int7[0]];
                }
                else if (num6 < num3)
                {
                    class103 = Class103.Class1030[_class890.Class880[int24].Class870[int25].Int7[1]];
                }
                else
                {
                    class103 = Class103.Class1030[_class890.Class880[int24].Class870[int25].Int7[2]];
                }
                Class103.smethod_1(class103, Int12, Int13, Int14, Int15, _class1020);
                _int2[i++] = Int12[0];
                _int2[i++] = Int13[0];
                _int1 = _int1 + Int12[0] + Int13[0];
                num6 += 2;
            }
            class103 = Class103.Class1030[_class890.Class880[int24].Class870[int25].Int13 + 32];
            var num7 = _class1020.method_0();
            while (num7 < num && i < 576)
            {
                Class103.smethod_1(class103, Int12, Int13, Int14, Int15, _class1020);
                _int2[i++] = Int14[0];
                _int2[i++] = Int15[0];
                _int2[i++] = Int12[0];
                _int2[i++] = Int13[0];
                _int1 = _int1 + Int14[0] + Int15[0] + Int12[0] + Int13[0];
                num7 = _class1020.method_0();
            }
            if (num7 > num)
            {
                _class1020.method_4(num7 - num);
                i -= 4;
            }
            num7 = _class1020.method_0();
            if (num7 < num)
            {
                _class1020.method_1(num - num7);
            }
            _int3[int24] = ((i < 576) ? i : 576);
            if (i < 0)
            {
                i = 0;
            }
            while (i < 576)
            {
                _int2[i] = 0;
                i++;
            }
        }

        private void method_6(int int24, int int25, int int26)
        {
            if (int24 == 0)
            {
                _float4[0, int26] = 1f;
                _float4[1, int26] = 1f;
                return;
            }
            if ((int24 & 1) != 0)
            {
                _float4[0, int26] = Float12[int25][int24 + 1 >> 1];
                _float4[1, int26] = 1f;
                return;
            }
            _float4[0, int26] = 1f;
            _float4[1, int26] = Float12[int25][int24 >> 1];
        }

        private void method_7(float[,] float17, int int24, int int25)
        {
            var @class = _class890.Class880[int24].Class870[int25];
            var num = 0;
            var num2 = 0;
            var num3 = 0;
            var num4 = 0;
            int num5;
            if (@class.Int4 != 0 && @class.Int5 == 2)
            {
                if (@class.Int6 != 0)
                {
                    num5 = _class860[_int10].Int0[1];
                }
                else
                {
                    num3 = _class860[_int10].Int1[1];
                    num5 = (num3 << 2) - num3;
                    num2 = 0;
                }
            }
            else
            {
                num5 = _class860[_int10].Int0[1];
            }
            var num6 = (float) Math.Pow(2.0, 0.25 * (@class.Int2 - 210.0));
            for (var i = 0; i < _int3[int24]; i++)
            {
                var num7 = i % 18;
                var num8 = (i - num7) / 18;
                if (_int2[i] == 0)
                {
                    float17[num8, num7] = 0f;
                }
                else
                {
                    var num9 = _int2[i];
                    if (num9 < Float11.Length)
                    {
                        if (_int2[i] > 0)
                        {
                            float17[num8, num7] = num6 * Float11[num9];
                        }
                        else if (-num9 < Float11.Length)
                        {
                            float17[num8, num7] = -num6 * Float11[-num9];
                        }
                        else
                        {
                            float17[num8, num7] = -num6 * (float) Math.Pow(-(double) num9, Double0);
                        }
                    }
                    else if (_int2[i] > 0)
                    {
                        float17[num8, num7] = num6 * (float) Math.Pow(num9, Double0);
                    }
                    else
                    {
                        float17[num8, num7] = -num6 * (float) Math.Pow(-(double) num9, Double0);
                    }
                }
            }
            for (var i = 0; i < _int3[int24]; i++)
            {
                var num10 = i % 18;
                var num11 = (i - num10) / 18;
                if (num4 == num5)
                {
                    if (@class.Int4 != 0 && @class.Int5 == 2)
                    {
                        if (@class.Int6 != 0)
                        {
                            if (num4 == _class860[_int10].Int0[8])
                            {
                                num5 = _class860[_int10].Int1[4];
                                num5 = (num5 << 2) - num5;
                                num = 3;
                                num3 = _class860[_int10].Int1[4] - _class860[_int10].Int1[3];
                                num2 = _class860[_int10].Int1[3];
                                num2 = (num2 << 2) - num2;
                            }
                            else if (num4 < _class860[_int10].Int0[8])
                            {
                                num5 = _class860[_int10].Int0[++num + 1];
                            }
                            else
                            {
                                num5 = _class860[_int10].Int1[++num + 1];
                                num5 = (num5 << 2) - num5;
                                num2 = _class860[_int10].Int1[num];
                                num3 = _class860[_int10].Int1[num + 1] - num2;
                                num2 = (num2 << 2) - num2;
                            }
                        }
                        else
                        {
                            num5 = _class860[_int10].Int1[++num + 1];
                            num5 = (num5 << 2) - num5;
                            num2 = _class860[_int10].Int1[num];
                            num3 = _class860[_int10].Int1[num + 1] - num2;
                            num2 = (num2 << 2) - num2;
                        }
                    }
                    else
                    {
                        num5 = _class860[_int10].Int0[++num + 1];
                    }
                }
                if (@class.Int4 != 0 && ((@class.Int5 == 2 && @class.Int6 == 0) ||
                                         (@class.Int5 == 2 && @class.Int6 != 0 && i >= 36)))
                {
                    var num12 = (num4 - num2) / num3;
                    var num13 = _class901[int24].Int1[num12, num] << @class.Int12;
                    num13 += @class.Int8[num12] << 2;
                    float17[num11, num10] *= Float10[num13];
                }
                else
                {
                    var num14 = _class901[int24].Int0[num];
                    if (@class.Int11 != 0)
                    {
                        num14 += Int19[num];
                    }
                    num14 <<= @class.Int12;
                    float17[num11, num10] *= Float10[num14];
                }
                num4++;
            }
            for (var i = _int3[int24]; i < 576; i++)
            {
                var num15 = i % 18;
                var num16 = (i - num15) / 18;
                if (num15 < 0)
                {
                    num15 = 0;
                }
                if (num16 < 0)
                {
                    num16 = 0;
                }
                float17[num16, num15] = 0f;
            }
        }

        private void method_8(float[,] float17, int int24, int int25)
        {
            var @class = _class890.Class880[int24].Class870[int25];
            if (@class.Int4 == 0 || @class.Int5 != 2)
            {
                for (var i = 0; i < 576; i++)
                {
                    var num = i % 18;
                    var num2 = (i - num) / 18;
                    _float2[i] = float17[num2, num];
                }
                return;
            }
            Array.Clear(_float2, 0, 576);
            if (@class.Int6 != 0)
            {
                for (var i = 0; i < 36; i++)
                {
                    var num3 = i % 18;
                    var num4 = (i - num3) / 18;
                    _float2[i] = float17[num4, num3];
                }
                for (var j = 3; j < 13; j++)
                {
                    var num5 = _class860[_int10].Int1[j];
                    var num6 = _class860[_int10].Int1[j + 1] - num5;
                    var num7 = (num5 << 2) - num5;
                    var k = 0;
                    var num8 = 0;
                    while (k < num6)
                    {
                        var num9 = num7 + k;
                        var num10 = num7 + num8;
                        var num11 = num9 % 18;
                        var num12 = (num9 - num11) / 18;
                        _float2[num10] = float17[num12, num11];
                        num9 += num6;
                        num10++;
                        num11 = num9 % 18;
                        num12 = (num9 - num11) / 18;
                        _float2[num10] = float17[num12, num11];
                        num9 += num6;
                        num10++;
                        num11 = num9 % 18;
                        num12 = (num9 - num11) / 18;
                        _float2[num10] = float17[num12, num11];
                        k++;
                        num8 += 3;
                    }
                }
                return;
            }
            for (var i = 0; i < 576; i++)
            {
                var num13 = _int22[_int10][i];
                var num14 = num13 % 18;
                var num15 = (num13 - num14) / 18;
                _float2[i] = float17[num15, num14];
            }
        }

        private void method_9(int int24)
        {
            if (_int7 == 1)
            {
                Array.Copy(_float0[0], 0, _float1[0], 0, 576);
                return;
            }
            var @class = _class890.Class880[0].Class870[int24];
            var num = _class1070.method_14();
            var flag = _class1070.method_8() == Enum5.Const1 && (num & 2) != 0;
            var flag2 = _class1070.method_8() == Enum5.Const1 && (num & 1) != 0;
            var flag3 = _class1070.method_3() == Enum3.Const0 || _class1070.method_3() == Enum3.Const2;
            var int25 = @class.Int3 & 1;
            int i;
            for (i = 0; i < 576; i++)
            {
                Int16[i] = 7;
            }
            Array.Clear(Float7, 0, 576);
            if (flag2)
            {
                if (@class.Int4 != 0 && @class.Int5 == 2)
                {
                    if (@class.Int6 != 0)
                    {
                        var num2 = 0;
                        for (var j = 0; j < 3; j++)
                        {
                            var num3 = 2;
                            int k;
                            for (k = 12; k >= 3; k--)
                            {
                                i = _class860[_int10].Int1[k];
                                var l = _class860[_int10].Int1[k + 1] - i;
                                i = (i << 2) - i + (j + 1) * l - 1;
                                while (l > 0)
                                {
                                    if (_float0[1][Int20[i], Int21[i]] != 0f)
                                    {
                                        num3 = k;
                                        k = -10;
                                        l = -10;
                                    }
                                    l--;
                                    i--;
                                }
                            }
                            k = num3 + 1;
                            if (k > num2)
                            {
                                num2 = k;
                            }
                            int num4;
                            int m;
                            while (k < 12)
                            {
                                num4 = _class860[_int10].Int1[k];
                                m = _class860[_int10].Int1[k + 1] - num4;
                                i = (num4 << 2) - num4 + j * m;
                                while (m > 0)
                                {
                                    Int16[i] = _class901[1].Int1[j, k];
                                    if (Int16[i] != 7)
                                    {
                                        if (flag3)
                                        {
                                            method_6(Int16[i], int25, i);
                                        }
                                        else
                                        {
                                            Float7[i] = Float13[Int16[i]];
                                        }
                                    }
                                    i++;
                                    m--;
                                }
                                k++;
                            }
                            k = _class860[_int10].Int1[10];
                            m = _class860[_int10].Int1[11] - k;
                            k = (k << 2) - k + j * m;
                            num4 = _class860[_int10].Int1[11];
                            m = _class860[_int10].Int1[12] - num4;
                            i = (num4 << 2) - num4 + j * m;
                            while (m > 0)
                            {
                                Int16[i] = Int16[k];
                                if (flag3)
                                {
                                    _float4[0, i] = _float4[0, k];
                                    _float4[1, i] = _float4[1, k];
                                }
                                else
                                {
                                    Float7[i] = Float7[k];
                                }
                                i++;
                                m--;
                            }
                        }
                        if (num2 <= 3)
                        {
                            i = 2;
                            var n = 17;
                            var m = -1;
                            while (i >= 0)
                            {
                                if (_float0[1][i, n] != 0f)
                                {
                                    m = (i << 4) + (i << 1) + n;
                                    i = -1;
                                }
                                else
                                {
                                    n--;
                                    if (n < 0)
                                    {
                                        i--;
                                        n = 17;
                                    }
                                }
                            }
                            i = 0;
                            while (_class860[_int10].Int0[i] <= m)
                            {
                                i++;
                            }
                            var k = i;
                            i = _class860[_int10].Int0[i];
                            while (k < 8)
                            {
                                for (m = _class860[_int10].Int0[k + 1] - _class860[_int10].Int0[k]; m > 0; m--)
                                {
                                    Int16[i] = _class901[1].Int0[k];
                                    if (Int16[i] != 7)
                                    {
                                        if (flag3)
                                        {
                                            method_6(Int16[i], int25, i);
                                        }
                                        else
                                        {
                                            Float7[i] = Float13[Int16[i]];
                                        }
                                    }
                                    i++;
                                }
                                k++;
                            }
                        }
                    }
                    else
                    {
                        for (var num5 = 0; num5 < 3; num5++)
                        {
                            var num6 = -1;
                            int k;
                            int num4;
                            for (k = 12; k >= 0; k--)
                            {
                                num4 = _class860[_int10].Int1[k];
                                var l = _class860[_int10].Int1[k + 1] - num4;
                                i = (num4 << 2) - num4 + (num5 + 1) * l - 1;
                                while (l > 0)
                                {
                                    if (_float0[1][Int20[i], Int21[i]] != 0f)
                                    {
                                        num6 = k;
                                        k = -10;
                                        l = -10;
                                    }
                                    l--;
                                    i--;
                                }
                            }
                            int m;
                            for (k = num6 + 1; k < 12; k++)
                            {
                                num4 = _class860[_int10].Int1[k];
                                m = _class860[_int10].Int1[k + 1] - num4;
                                i = (num4 << 2) - num4 + num5 * m;
                                while (m > 0)
                                {
                                    Int16[i] = _class901[1].Int1[num5, k];
                                    if (Int16[i] != 7)
                                    {
                                        if (flag3)
                                        {
                                            method_6(Int16[i], int25, i);
                                        }
                                        else
                                        {
                                            Float7[i] = Float13[Int16[i]];
                                        }
                                    }
                                    i++;
                                    m--;
                                }
                            }
                            num4 = _class860[_int10].Int1[10];
                            var num7 = _class860[_int10].Int1[11];
                            m = num7 - num4;
                            k = (num4 << 2) - num4 + num5 * m;
                            m = _class860[_int10].Int1[12] - num7;
                            i = (num7 << 2) - num7 + num5 * m;
                            while (m > 0)
                            {
                                Int16[i] = Int16[k];
                                if (flag3)
                                {
                                    _float4[0, i] = _float4[0, k];
                                    _float4[1, i] = _float4[1, k];
                                }
                                else
                                {
                                    Float7[i] = Float7[k];
                                }
                                i++;
                                m--;
                            }
                        }
                    }
                }
                else
                {
                    i = 31;
                    var n = 17;
                    var m = 0;
                    while (i >= 0)
                    {
                        if (_float0[1][i, n] != 0f)
                        {
                            m = (i << 4) + (i << 1) + n;
                            i = -1;
                        }
                        else
                        {
                            n--;
                            if (n < 0)
                            {
                                i--;
                                n = 17;
                            }
                        }
                    }
                    i = 0;
                    while (_class860[_int10].Int0[i] <= m)
                    {
                        i++;
                    }
                    var k = i;
                    i = _class860[_int10].Int0[i];
                    while (k < 21)
                    {
                        for (m = _class860[_int10].Int0[k + 1] - _class860[_int10].Int0[k]; m > 0; m--)
                        {
                            Int16[i] = _class901[1].Int0[k];
                            if (Int16[i] != 7)
                            {
                                if (flag3)
                                {
                                    method_6(Int16[i], int25, i);
                                }
                                else
                                {
                                    Float7[i] = Float13[Int16[i]];
                                }
                            }
                            i++;
                        }
                        k++;
                    }
                    k = _class860[_int10].Int0[20];
                    m = 576 - _class860[_int10].Int0[21];
                    while (m > 0 && i < 576)
                    {
                        Int16[i] = Int16[k];
                        if (flag3)
                        {
                            _float4[0, i] = _float4[0, k];
                            _float4[1, i] = _float4[1, k];
                        }
                        else
                        {
                            Float7[i] = Float7[k];
                        }
                        i++;
                        m--;
                    }
                }
            }
            i = 0;
            for (var m = 0; m < 32; m++)
            {
                for (var n = 0; n < 18; n++)
                {
                    if (Int16[i] == 7)
                    {
                        if (flag)
                        {
                            _float1[0][m, n] = (_float0[0][m, n] + _float0[1][m, n]) * 0.707106769f;
                            _float1[1][m, n] = (_float0[0][m, n] - _float0[1][m, n]) * 0.707106769f;
                        }
                        else
                        {
                            _float1[0][m, n] = _float0[0][m, n];
                            _float1[1][m, n] = _float0[1][m, n];
                        }
                    }
                    else if (flag2)
                    {
                        if (flag3)
                        {
                            _float1[0][m, n] = _float0[0][m, n] * _float4[0, i];
                            _float1[1][m, n] = _float0[0][m, n] * _float4[1, i];
                        }
                        else
                        {
                            _float1[1][m, n] = _float0[0][m, n] / (1f + Float7[i]);
                            _float1[0][m, n] = _float1[1][m, n] * Float7[i];
                        }
                    }
                    i++;
                }
            }
        }

        private void method_10(int int24, int int25)
        {
            var @class = _class890.Class880[int24].Class870[int25];
            if (@class.Int4 != 0 && @class.Int5 == 2 && @class.Int6 == 0)
            {
                return;
            }
            int num;
            if (@class.Int4 != 0 && @class.Int6 != 0 && @class.Int5 == 2)
            {
                num = 18;
            }
            else
            {
                num = 558;
            }
            for (var i = 0; i < num; i += 18)
            {
                for (var j = 0; j < 8; j++)
                {
                    var num2 = i + 17 - j;
                    var num3 = i + 18 + j;
                    var num4 = _float2[num2];
                    var num5 = _float2[num3];
                    _float2[num2] = num4 * Float14[j] - num5 * Float15[j];
                    _float2[num3] = num5 * Float14[j] + num4 * Float15[j];
                }
            }
        }

        private void method_11(int int24, int int25)
        {
            var @class = _class890.Class880[int24].Class870[int25];
            for (var i = 0; i < 576; i += 18)
            {
                var int26 = (@class.Int4 == 0 || @class.Int6 == 0 || i >= 36) ? @class.Int5 : 0;
                var array = _float2;
                for (var j = 0; j < 18; j++)
                {
                    Float8[j] = array[j + i];
                }
                method_13(Float8, Float9, int26);
                for (var k = 0; k < 18; k++)
                {
                    array[k + i] = Float8[k];
                }
                var array2 = _float3;
                array[i] = Float9[0] + array2[int24, i];
                array2[int24, i] = Float9[18];
                array[1 + i] = Float9[1] + array2[int24, i + 1];
                array2[int24, i + 1] = Float9[19];
                array[2 + i] = Float9[2] + array2[int24, i + 2];
                array2[int24, i + 2] = Float9[20];
                array[3 + i] = Float9[3] + array2[int24, i + 3];
                array2[int24, i + 3] = Float9[21];
                array[4 + i] = Float9[4] + array2[int24, i + 4];
                array2[int24, i + 4] = Float9[22];
                array[5 + i] = Float9[5] + array2[int24, i + 5];
                array2[int24, i + 5] = Float9[23];
                array[6 + i] = Float9[6] + array2[int24, i + 6];
                array2[int24, i + 6] = Float9[24];
                array[7 + i] = Float9[7] + array2[int24, i + 7];
                array2[int24, i + 7] = Float9[25];
                array[8 + i] = Float9[8] + array2[int24, i + 8];
                array2[int24, i + 8] = Float9[26];
                array[9 + i] = Float9[9] + array2[int24, i + 9];
                array2[int24, i + 9] = Float9[27];
                array[10 + i] = Float9[10] + array2[int24, i + 10];
                array2[int24, i + 10] = Float9[28];
                array[11 + i] = Float9[11] + array2[int24, i + 11];
                array2[int24, i + 11] = Float9[29];
                array[12 + i] = Float9[12] + array2[int24, i + 12];
                array2[int24, i + 12] = Float9[30];
                array[13 + i] = Float9[13] + array2[int24, i + 13];
                array2[int24, i + 13] = Float9[31];
                array[14 + i] = Float9[14] + array2[int24, i + 14];
                array2[int24, i + 14] = Float9[32];
                array[15 + i] = Float9[15] + array2[int24, i + 15];
                array2[int24, i + 15] = Float9[33];
                array[16 + i] = Float9[16] + array2[int24, i + 16];
                array2[int24, i + 16] = Float9[34];
                array[17 + i] = Float9[17] + array2[int24, i + 17];
                array2[int24, i + 17] = Float9[35];
            }
        }

        private void method_12()
        {
            for (var i = 0; i < 18; i++)
            {
                for (var j = 0; j < 18; j += 3)
                {
                    _float1[0][i, j] = (_float1[0][i, j] + _float1[1][i, j]) * 0.5f;
                    _float1[0][i, j + 1] = (_float1[0][i, j + 1] + _float1[1][i, j + 1]) * 0.5f;
                    _float1[0][i, j + 2] = (_float1[0][i, j + 2] + _float1[1][i, j + 2]) * 0.5f;
                }
            }
        }

        public void method_13(float[] float17, float[] float18, int int24)
        {
            float num5;
            float num6;
            float num7;
            float num8;
            float num9;
            float num10;
            float num12;
            float num13;
            float num14;
            float num15;
            float num16;
            float num17;
            if (int24 == 2)
            {
                Array.Clear(float18, 0, 36);
                var num = 0;
                for (var i = 0; i < 3; i++)
                {
                    float17[15 + i] += float17[12 + i];
                    float17[12 + i] += float17[9 + i];
                    float17[9 + i] += float17[6 + i];
                    float17[6 + i] += float17[3 + i];
                    float17[3 + i] += float17[i];
                    float17[15 + i] += float17[9 + i];
                    float17[9 + i] += float17[3 + i];
                    var num2 = float17[12 + i] * 0.5f;
                    var num3 = float17[6 + i] * 0.8660254f;
                    var num4 = float17[i] + num2;
                    num5 = float17[i] - float17[12 + i];
                    num6 = num4 + num3;
                    num7 = num4 - num3;
                    num2 = float17[15 + i] * 0.5f;
                    num3 = float17[9 + i] * 0.8660254f;
                    num4 = float17[3 + i] + num2;
                    num8 = float17[3 + i] - float17[15 + i];
                    num9 = num4 + num3;
                    num10 = num4 - num3;
                    num10 *= 1.93185163f;
                    num8 *= 0.707106769f;
                    num9 *= 0.5176381f;
                    var num11 = num6;
                    num6 += num9;
                    num9 = num11 - num9;
                    num11 = num5;
                    num5 += num8;
                    num8 = num11 - num8;
                    num11 = num7;
                    num7 += num10;
                    num10 = num11 - num10;
                    num6 *= 0.5043145f;
                    num5 *= 0.5411961f;
                    num7 *= 0.6302362f;
                    num10 *= 0.8213398f;
                    num8 *= 1.306563f;
                    num9 *= 3.830649f;
                    num12 = -num6 * 0.7933533f;
                    num13 = -num6 * 0.6087614f;
                    num14 = -num5 * 0.9238795f;
                    num15 = -num5 * 0.382683426f;
                    num16 = -num7 * 0.9914449f;
                    num17 = -num7 * 0.130526185f;
                    num6 = num10;
                    num5 = num8 * 0.382683426f;
                    num7 = num9 * 0.6087614f;
                    num10 = -num9 * 0.7933533f;
                    num8 = -num8 * 0.9238795f;
                    num9 = -num6 * 0.9914449f;
                    num6 *= 0.130526185f;
                    float18[num + 6] += num6;
                    float18[num + 7] += num5;
                    float18[num + 8] += num7;
                    float18[num + 9] += num10;
                    float18[num + 10] += num8;
                    float18[num + 11] += num9;
                    float18[num + 12] += num16;
                    float18[num + 13] += num14;
                    float18[num + 14] += num12;
                    float18[num + 15] += num13;
                    float18[num + 16] += num15;
                    float18[num + 17] += num17;
                    num += 6;
                }
                return;
            }
            float17[17] += float17[16];
            float17[16] += float17[15];
            float17[15] += float17[14];
            float17[14] += float17[13];
            float17[13] += float17[12];
            float17[12] += float17[11];
            float17[11] += float17[10];
            float17[10] += float17[9];
            float17[9] += float17[8];
            float17[8] += float17[7];
            float17[7] += float17[6];
            float17[6] += float17[5];
            float17[5] += float17[4];
            float17[4] += float17[3];
            float17[3] += float17[2];
            float17[2] += float17[1];
            float17[1] += float17[0];
            float17[17] += float17[15];
            float17[15] += float17[13];
            float17[13] += float17[11];
            float17[11] += float17[9];
            float17[9] += float17[7];
            float17[7] += float17[5];
            float17[5] += float17[3];
            float17[3] += float17[1];
            var num18 = float17[0] + float17[0];
            var num19 = num18 + float17[12];
            var num20 = num19 + float17[4] * 1.87938523f + float17[8] * 1.53208888f + float17[16] * 0.347296357f;
            var num21 = num18 + float17[4] - float17[8] - float17[12] - float17[12] - float17[16];
            var num22 = num19 - float17[4] * 0.347296357f - float17[8] * 1.87938523f + float17[16] * 1.53208888f;
            var num23 = num19 - float17[4] * 1.53208888f + float17[8] * 0.347296357f - float17[16] * 1.87938523f;
            var num24 = float17[0] - float17[4] + float17[8] - float17[12] + float17[16];
            var num25 = float17[6] * 1.73205078f;
            var num26 = float17[2] * 1.96961546f + num25 + float17[10] * 1.28557527f + float17[14] * 0.6840403f;
            var num27 = (float17[2] - float17[10] - float17[14]) * 1.73205078f;
            var num28 = float17[2] * 1.28557527f - num25 - float17[10] * 0.6840403f + float17[14] * 1.96961546f;
            var num29 = float17[2] * 0.6840403f - num25 + float17[10] * 1.96961546f - float17[14] * 1.28557527f;
            var num30 = float17[1] + float17[1];
            var num31 = num30 + float17[13];
            var num32 = num31 + float17[5] * 1.87938523f + float17[9] * 1.53208888f + float17[17] * 0.347296357f;
            var num33 = num30 + float17[5] - float17[9] - float17[13] - float17[13] - float17[17];
            var num34 = num31 - float17[5] * 0.347296357f - float17[9] * 1.87938523f + float17[17] * 1.53208888f;
            var num35 = num31 - float17[5] * 1.53208888f + float17[9] * 0.347296357f - float17[17] * 1.87938523f;
            var num36 = (float17[1] - float17[5] + float17[9] - float17[13] + float17[17]) * 0.707106769f;
            var num37 = float17[7] * 1.73205078f;
            var num38 = float17[3] * 1.96961546f + num37 + float17[11] * 1.28557527f + float17[15] * 0.6840403f;
            var num39 = (float17[3] - float17[11] - float17[15]) * 1.73205078f;
            var num40 = float17[3] * 1.28557527f - num37 - float17[11] * 0.6840403f + float17[15] * 1.96961546f;
            var num41 = float17[3] * 0.6840403f - num37 + float17[11] * 1.96961546f - float17[15] * 1.28557527f;
            var num42 = num20 + num26;
            var num43 = (num32 + num38) * 0.5019099f;
            num6 = num42 + num43;
            var num44 = num42 - num43;
            num42 = num21 + num27;
            num43 = (num33 + num39) * 0.5176381f;
            num5 = num42 + num43;
            var num45 = num42 - num43;
            num42 = num22 + num28;
            num43 = (num34 + num40) * 0.551688969f;
            num7 = num42 + num43;
            var num46 = num42 - num43;
            num42 = num23 + num29;
            num43 = (num35 + num41) * 0.610387266f;
            num10 = num42 + num43;
            var num47 = num42 - num43;
            num8 = num24 + num36;
            var num48 = num24 - num36;
            num42 = num23 - num29;
            num43 = (num35 - num41) * 0.8717234f;
            num9 = num42 + num43;
            var num49 = num42 - num43;
            num42 = num22 - num28;
            num43 = (num34 - num40) * 1.18310082f;
            num16 = num42 + num43;
            num17 = num42 - num43;
            num42 = num21 - num27;
            num43 = (num33 - num39) * 1.93185163f;
            num14 = num42 + num43;
            num15 = num42 - num43;
            num42 = num20 - num26;
            num43 = (num32 - num38) * 5.73685646f;
            num12 = num42 + num43;
            num13 = num42 - num43;
            var array = Float16[int24];
            float18[0] = -num13 * array[0];
            float18[1] = -num15 * array[1];
            float18[2] = -num17 * array[2];
            float18[3] = -num49 * array[3];
            float18[4] = -num48 * array[4];
            float18[5] = -num47 * array[5];
            float18[6] = -num46 * array[6];
            float18[7] = -num45 * array[7];
            float18[8] = -num44 * array[8];
            float18[9] = num44 * array[9];
            float18[10] = num45 * array[10];
            float18[11] = num46 * array[11];
            float18[12] = num47 * array[12];
            float18[13] = num48 * array[13];
            float18[14] = num49 * array[14];
            float18[15] = num17 * array[15];
            float18[16] = num15 * array[16];
            float18[17] = num13 * array[17];
            float18[18] = num12 * array[18];
            float18[19] = num14 * array[19];
            float18[20] = num16 * array[20];
            float18[21] = num9 * array[21];
            float18[22] = num8 * array[22];
            float18[23] = num10 * array[23];
            float18[24] = num7 * array[24];
            float18[25] = num5 * array[25];
            float18[26] = num6 * array[26];
            float18[27] = num6 * array[27];
            float18[28] = num5 * array[28];
            float18[29] = num7 * array[29];
            float18[30] = num10 * array[30];
            float18[31] = num8 * array[31];
            float18[32] = num9 * array[32];
            float18[33] = num16 * array[33];
            float18[34] = num14 * array[34];
            float18[35] = num12 * array[35];
        }

        private static float[] smethod_0()
        {
            var array = new float[8192];
            var y = 1.3333333333333333;
            for (var i = 0; i < 8192; i++)
            {
                array[i] = (float) Math.Pow(i, y);
            }
            return array;
        }

        public static int[] smethod_1(int[] int24)
        {
            var num = 0;
            var array = new int[576];
            for (var i = 0; i < 13; i++)
            {
                var num2 = int24[i];
                var num3 = int24[i + 1];
                for (var j = 0; j < 3; j++)
                {
                    for (var k = num2; k < num3; k++)
                    {
                        array[3 * k + j] = num++;
                    }
                }
            }
            return array;
        }
    }
}